# replace "mydomain" with your own domain

events {
    worker_connections 1024;
}

stream {
    map $status $bad_status {
        ~^[23]  0;  # Match 2xx and 3xx status codes
        default 1;  # everything else
    }

    log_format basic '[$time_local] $status: $remote_addr | $session_time '
                     'to $ssl_server_name';

    map $ssl_preread_server_name $pass_domains {
        # baikal.mydomain.com baikal; # baikal --- uncomment if used
        # obsidian.mydomain.com obsidian; # obsidian --- uncomment if used
        # kopia.mydomain.com kopia; # obsidian --- uncomment if used
        # servername.com xtls; # xtls reality sni --- uncomment if used
    }
    
    # uncomment service upstream if used

    # upstream xtls {
        # server xray:50101; # xray port
    # }

    # upstream baikal {
        # server nginx:50102; # baikal port
    # }

    # upstream obsidian {
        # server nginx:50103; # baikal port
    # }

    # upstream kopia {
        # server nginx:50110; # kopia port
    # }

    server {
        listen 443      reuseport;
        listen [::]:443 reuseport;
        proxy_pass      $pass_domains;
        ssl_preread     on;
        proxy_protocol  on;

        access_log /var/log/nginx/proxy.access.log basic;
        access_log /var/log/nginx/proxy.access.bad.log basic if=$bad_status;
        error_log  /var/log/nginx/proxy.error.log;
    }

    set_real_ip_from nginx; # host, container name in this case
}

error_log /var/log/nginx/top-error.log notice;

http {
map $status $bad_status {
    ~^[23]  0;  # Match 2xx and 3xx status codes
    default 1;  # everything else
}

log_format proxied '[$time_local] $status: $proxy_protocol_addr ($remote_user) - with remote_addr $remote_addr '
                    'to $ssl_server_name at "$request", $body_bytes_sent bytes '
                    '"$http_referer" "$http_user_agent"';

access_log /var/log/nginx/top-access.log proxied;
access_log /var/log/nginx/top-access.bad.log proxied if=$bad_status;

proxy_set_header X-Real-IP       $proxy_protocol_addr;
proxy_set_header X-Forwarded-For $proxy_protocol_addr;
set_real_ip_from nginx; # host, container name in this case

add_header Content-Security-Policy upgrade-insecure-requests;
real_ip_header proxy_protocol;

server_tokens off;

geo $private_net_access {
    default 0;
    192.168.2.0/24 1; # your IP / net
}

# increase cache to store more sessions
ssl_session_cache   shared:SSL:10m;
ssl_session_timeout 1h;

# http with redirect to https and with .well-known path for certbot
server {
    listen 80;

    server_name mydomain.com;

    location /.well-known/ {
        root /var/www/mydomain.com;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

include /etc/nginx/conf.d/*.conf;

}
